@page "/mapa-edicion/{id:int}"
@inject NavigationManager Navigation
@inject ILogger<SalonModify> Logger
@inject IJSRuntime JSRuntime

@using System.Text.Json
@using System.Net.Http
@using RMSuit_v2.Models

<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>


<style>
    .map-container {
        position: relative;
        width: 100%;
        height: 700px;
        border: 1px solid #ccc;
        overflow: hidden;
        background-color: #b8b8b8;
    }

    .zoom-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        transform-origin: top left;
        transition: transform 0.3s;
    }

    .drawing-item {
        position: absolute;
        width: 100px;
        height: 100px;
        cursor: pointer;
        user-select: none;
        z-index: 1000;
        /* Asegúrate de que los elementos no se superpongan */
        overflow: hidden;
    }

        .drawing-item img {
            max-width: 100%;
            max-height: 100%;
            width: auto;
            height: auto;
        }

    .drawing-list {
        position: absolute;
        right: 0;
        top: 0;
        width: 150px;
        max-height: 100%;
        overflow-y: auto;
        background-color: #b8b8b8;
        border-left: 1px solid #ccc;
        z-index: 100;
        padding: 10px;
        cursor: move;
        pointer-events: none;
    }

        .drawing-list .list-item {
            pointer-events: auto;
        }

    .delete-button {
        position: absolute;
        top: 5px;
        right: 5px;
        background: red;
        color: white;
        border: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        text-align: center;
        line-height: 20px;
        cursor: pointer;
        display: none; 
    }

    .drawing-item:hover .delete-button {
        display: block; 
    }

</style>

<h3>Mapa del Salón</h3>

@if (salonResponse == null)
{
    <p>Cargando detalles del salón...</p>
}
else
{
    <div class="map-container" @onclick="OnMapClick">
        <div class="zoom-container" ondrop="drop(event)" ondragover="allowDrop(event)">
            @if (salonResponse.dibujos != null && salonResponse.dibujos.Any())
            {
                var orderedDrawings = salonResponse.dibujos
                .Where(d => d.estado == "D" || d.estado == "N")
                .OrderBy(d => d.estado == "D")
                .ToList();

                var occupiedPositions = new HashSet<(int, int)>();

                @foreach (var dibujo in orderedDrawings)
                {
                    var salonDetails = salonResponse.mesas
                    .Where(m => m.dibujos == dibujo.dibujos)
                    .ToList();

                    foreach (var salonDetail in salonDetails)
                    {
                        int adjustedLeft = (int)(salonDetail.posicionX);
                        int adjustedTop = (int)(salonDetail.posicionY);

                        var adjustedPosition = (adjustedTop, adjustedLeft);

                        if (!occupiedPositions.Contains(adjustedPosition))
                        {
                            occupiedPositions.Add(adjustedPosition);

                            <div class="drawing-item"
                                 style="top:@(adjustedPosition.Item1)px; left:@(adjustedPosition.Item2)px;"
                                 @onclick="() => OnImageClick(salonDetail.mesa)"
                                 id="dibujo-@salonDetail.mesa">
                                @if (!string.IsNullOrEmpty(dibujo.grafico))
                                {
                                    <img src="data:image/jpeg;base64,@dibujo.grafico" alt="@dibujo.estado" />
                                }
                                else
                                {
                                    <p>No hay imagen disponible.</p>
                                }
                                <button class="delete-button" onclick="deleteElement('dibujo-@salonDetail.mesa')">X</button>

                            </div>
                        }
                    }
                }
            }
            else
            {
                <p>No se encontraron dibujos para este salón.</p>
            }

            <div class="drawing-list">
                <h4>Lista de añadido de mesas</h4>
                @if (salonResponse?.dibujos != null)
                {
                    @foreach (var dibujo in salonResponse.dibujos.DistinctBy(d => d.dibujos).Where(d => d.estado == "N" || d.estado == "D"))
                    {
                        <div class="list-item" id="dibujo-list-@dibujo.dibujos" draggable="true" ondragstart="drag(event)" data-dibujo-id="@dibujo.dibujos">
                            @if (!string.IsNullOrEmpty(dibujo.grafico))
                            {
                                <img src="data:image/jpeg;base64,@dibujo.grafico" alt="@dibujo.estado" />
                            }
                        </div>
                    }
                }
                else
                {
                    <p>No hay dibujos disponibles.</p>
                }
            </div>
        </div>
    </div>
}

<button @onclick="GuardarCambios">Guardar Cambios</button>
<button @onclick="Cancelar">Cancelar</button>

@code {
    [Parameter] public int id { get; set; }
    private SalonResponse? salonResponse;
    private int? hiddenDibujoId = null;
    private int maxX;
    private int maxY;

    private DotNetObjectReference<SalonModify>? _dotNetRef;


    private void CalculateMaxDimensions()
    {
        maxX = 0;
        maxY = 0;


        if (salonResponse?.dibujos != null && salonResponse.mesas != null)
        {
            foreach (var dibujo in salonResponse.dibujos)
            {

                var salonDetails = salonResponse.mesas
                    .Where(m => m.dibujos == dibujo.dibujos)
                    .ToList();

                foreach (var salonDetail in salonDetails)
                {

                    var adjustedLeft = (int)(salonDetail.posicionX);
                    var adjustedTop = (int)(salonDetail.posicionY);

                    maxX = Math.Max(maxX, adjustedLeft);
                    maxY = Math.Max(maxY, adjustedTop);
                }
            }
        }
        else
        {
            Logger.LogWarning("No se pudo calcular las dimensiones máximas: 'salonResponse', 'dibujos' o 'mesas' es nulo.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSalonDetail();
        CalculateMaxDimensions();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);


            await Task.Delay(500); // Esperar milisegundos

            await JSRuntime.InvokeVoidAsync("initializeDotNetObject", _dotNetRef);
            await JSRuntime.InvokeVoidAsync("initializeSortable");
        }
    }


#pragma warning disable CS1998
    public Task DisposeAsync()
    {
        if (_dotNetRef != null)
        {
            _dotNetRef.Dispose();
        }

        return Task.CompletedTask;
    }

    private async Task LoadSalonDetail()
    {
        try
        {
            using var client = new HttpClient(new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
                });

            var url = $"https://37.59.32.58:1380/Master/Salons/GetSalonDetail/{id}?includeDrawings=true&initialCatalog=ELSIFON";
            var response = await client.GetStringAsync(url);

            var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    PropertyNameCaseInsensitive = true
                };

            salonResponse = JsonSerializer.Deserialize<SalonResponse>(response, options);

            if (salonResponse == null)
            {
                Logger.LogWarning("No se pudieron cargar los detalles del salón. salonResponse es null.");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar los detalles del salón.");
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo($"/salonmapa/{id}");
    }

    private void OnImageClick(int dibujoId)
    {

        Logger.LogWarning($"Image clicked: {dibujoId}");

        hiddenDibujoId = dibujoId;
        StateHasChanged();
    }

    private async Task AddDraggingClass(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("addDraggingClass", elementId);
    }






    private async Task OnMapClick(MouseEventArgs e)
    {

        Logger.LogWarning($"Map clicked: {e.ClientX}, {e.ClientY}");

        if (hiddenDibujoId.HasValue && isDragging)
        {
            var position = await JSRuntime.InvokeAsync<(int x, int y)>("getMousePosition", e.ClientX, e.ClientY);

            // Actualizar la posición en la lista de mesas
            var dibujoId = hiddenDibujoId.Value;

            Logger.LogInformation($"Dibujo {dibujoId} movido a nueva posición: (x: {position.x}, y: {position.y})");

            // Actualizar la posición en el modelo
            await UpdateElementPositionAsync(dibujoId, position.x, position.y);

            hiddenDibujoId = null;
            isDragging = false;

            StateHasChanged();

            // Se actualiza visualmente
            await JSRuntime.InvokeVoidAsync("updateElementPosition", $"dibujo-{dibujoId}", position.x, position.y);

        }
        else
        {
            Logger.LogWarning("No se encontró un dibujo seleccionado para mover o no se está arrastrando.");
        }
    }

    private async Task GuardarCambios()
    {
        try
        {
            // Invoca la función JavaScript para guardar las nuevas posiciones en el frontend
            await JSRuntime.InvokeVoidAsync("saveNewPositions");

            using var client = new HttpClient();

            if (salonResponse?.mesas != null)
            {
                // Recorre las mesas en lugar de los dibujos
                foreach (var salonDetail in salonResponse.mesas)
                {

                    var dibujoId = salonDetail.mesa;

                    if (salonDetail != null)
                    {
                        // Genera la URL usando el ID de la mesa en lugar de dibujo.dibujos
                        var url = $"https://37.59.32.58:1380/Master/SalonTables/UpdateTablePosition/{dibujoId}/{salonDetail.mesa}/{salonDetail.dibujos}?initialCatalog=ELSIFON";
                        var response = await client.PostAsJsonAsync(url, salonDetail);

                        if (response.IsSuccessStatusCode)
                        {
                            Logger.LogInformation($"Posición actualizada para mesa ID: {salonDetail.mesa}");
                        }
                        else
                        {
                            Logger.LogError($"Error al actualizar la posición para mesa ID: {salonDetail.mesa}");
                        }
                    }
                    else
                    {
                        Logger.LogWarning("No se encontró un detalle para la mesa.");
                    }
                }
            }
            else
            {
                Logger.LogWarning("No se encontraron mesas en el salón o la respuesta del salón es nula.");
            }

            // Actualiza la interfaz de usuario y redirige al mapa del salón
            StateHasChanged();
            Navigation.NavigateTo($"/salonmapa/{id}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al guardar los cambios en las posiciones.");
        }
    }

    public event Action<int, int, int> OnPositionUpdated = delegate { };


    // Arrastre



    public static bool isDragging { get; set; }

    [JSInvokable("SetDraggingState")]
    public static Task SetDraggingState(bool dragging)
    {

        Console.WriteLine($"Arrancando SetDraggingState. Nuevo estado: {dragging}");

        // Lógica para actualizar el estado de arrastre
        isDragging = dragging;
        return Task.CompletedTask;
    }

    private bool isUpdatingPosition = false;


    [JSInvokable("UpdateElementPositionAsync")]
    public async Task UpdateElementPositionAsync(int dibujoId, int newX, int newY)
    {

        if (isUpdatingPosition)
        {
            Logger.LogInformation($"Evitar bucles infinitos de {dibujoId}.");
            return;
        }

        if (newX < 0 || newY < 0)
        {
            Console.WriteLine($"Error: coordenadas no válidas - X: {newX}, Y: {newY}");
            return;
        }

        isUpdatingPosition = true;
        Logger.LogInformation($"Invocado UpdateElementPositionAsync de .NET para dibujo ID {dibujoId}: (X: {newX}, Y: {newY})");


        if (salonResponse?.mesas != null)
        {
            var detalle = salonResponse.mesas.FirstOrDefault(m => m.dibujos == dibujoId);
            if (detalle != null)
            {

                // Verifica si la nueva posición es diferente a la actual antes de actualizar
                int currentX = detalle.posicionX;
                int currentY = detalle.posicionY;

                if (newX != currentX || newY != currentY)
                {

                    Logger.LogInformation($"Actualizando dibujo ID {dibujoId}: Actual X={currentX}, Actual Y={currentY}, Nueva X={newX}, Nueva Y={newY}");

                    // Validar y actualizar posición
                    if (newX >= 0 && newY >= 0 && newX <= maxX && newY <= maxY)
                    {
                        detalle.posicionX = (int)newX;
                        detalle.posicionY = (int)newY;

                        // Actualizar en la interfaz de usuario

                        await JSRuntime.InvokeVoidAsync("updateElementPositionWithoutInvocation", $"dibujo-{dibujoId}", newX, newY);
                        StateHasChanged();

                    }
                    else
                    {
                        Logger.LogWarning($"Coordenadas fuera de rango para dibujo ID {dibujoId}: (X: {newX}, Y: {newY})");
                    }
                }

                else
                {
                    Logger.LogInformation($"La posición no cambió para el dibujo ID {dibujoId}. No se requiere actualización.");
                }
            }

            else
            {
                Logger.LogWarning($"No se encontró un detalle para el dibujo con ID: {dibujoId}");
            }
        }
        isUpdatingPosition = false;
    }


    // Para mostrar mensajes de js en logger

    [JSInvokable]
    public static Task LogMessage(string message)
    {
        var logger = LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger("JSLogger");
        logger.LogInformation($"Mensaje desde JS: {message}");
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task DeleteElementAsync(int elementId)
    {
        // Lógica para eliminar el elemento de la base de datos
    }


}

<script>

    let dotNetRef = null;

    // Método para inicializar el DotNetObjectReference
    window.initializeDotNetObject = (dotNetObject) => {
        dotNetRef = dotNetObject;
        initializeSortable();
    };

    window.addEventListener('load', () => {
        dotNetRef = dotNetReference;
        initializeSortable();
    });

    function logMessage(message) {
        DotNet.invokeMethodAsync('RMSuit_v2', 'LogMessage', message)
            .then(result => {
                console.log('Mensaje registrado:', message);
            })
            .catch(error => {
                console.error('Error al registrar el mensaje:', error);
            });
    }

    function allowDrop(event) {
        event.preventDefault();
    }

    function drag(event) {
        event.stopPropagation(); // Previene el arrastre del contenedor padre.
        const isFromDrawingList = event.target.closest('.drawing-list') ? 'true' : 'false';
        event.dataTransfer.setData("is-from-drawing-list", isFromDrawingList); // Indica si el arrastre proviene del drawing-list.
        event.dataTransfer.setData("dibujo-id", event.target.getAttribute("data-dibujo-id"));
        event.dataTransfer.setData("offsetX", event.clientX - event.target.getBoundingClientRect().left);
        event.dataTransfer.setData("offsetY", event.clientY - event.target.getBoundingClientRect().top);
    }

    function drop(event) {
        event.preventDefault();

        const dibujoId = event.dataTransfer.getData("dibujo-id");
        const isFromDrawingList = event.dataTransfer.getData("is-from-drawing-list");

        if (!dibujoId || isNaN(dibujoId)) {
            logMessage(`Error: dibujoId no válido: ${dibujoId}`);
            return;
        }

        const offsetX = parseInt(event.dataTransfer.getData("offsetX"));
        const offsetY = parseInt(event.dataTransfer.getData("offsetY"));
        const x = event.clientX - offsetX;
        const y = event.clientY - offsetY;

        const element = document.querySelector(`#dibujo-list-${dibujoId}`);
        if (element) {
            const mapContainer = document.querySelector('.map-container');
            const containerRect = mapContainer.getBoundingClientRect();

            const adjustedX = x - containerRect.left;
            const adjustedY = y - containerRect.top;

            // Solo añadir al zoom-container si viene del drawing-list
            if (isFromDrawingList === 'true') {
                const zoomContainer = document.querySelector('.zoom-container');

                // Clonar el elemento original
                const clonedElement = element.cloneNode(true);
                clonedElement.classList.add('drawing-item');

                // Asignar un nuevo ID único al clon
                const newDibujoId = `dibujo-list-${Date.now()}`;
                clonedElement.id = newDibujoId;

                // Establecer la posición del nuevo elemento en el zoom-container
                clonedElement.style.position = 'absolute';
                clonedElement.style.left = `${adjustedX}px`;
                clonedElement.style.top = `${adjustedY}px`;

                // Crear y añadir el botón de eliminar al clon
                const deleteButton = document.createElement('button');
                deleteButton.className = 'delete-button';
                deleteButton.textContent = 'X';
                deleteButton.onclick = function () {
                    zoomContainer.removeChild(clonedElement);
                };
                clonedElement.appendChild(deleteButton);

                // Añadir el nuevo elemento al zoom-container
                zoomContainer.appendChild(clonedElement);

                // Asegurarse de que el clon sea arrastrable
                clonedElement.addEventListener("dragstart", drag);
            }

            // Invocar la actualización en Blazor
            dotNetRef.invokeMethodAsync('UpdateElementPositionAsync', parseInt(dibujoId), adjustedX, adjustedY)
                .catch(error => console.log(`Error al actualizar la posición: ${error}`));
        }
    }

    function deleteElement(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.remove(); // Elimina el elemento del DOM

            // Llamar al método Blazor para actualizar la base de datos si es necesario
            if (dotNetRef) {
                dotNetRef.invokeMethodAsync('DeleteElementAsync', parseInt(elementId.replace('dibujo-', '')))
                    .catch(error => console.log(`Error al eliminar el elemento: ${error}`));
            }
        }
    }

    window.initializeSortable = () => {
        const tryInitialize = () => {
            const container = document.querySelector('.zoom-container');
            if (container) {
                logMessage('Contenedor encontrado:', container);

                Sortable.create(container, {
                    animation: 150,
                    onStart: (evt) => {
                        const element = evt.item;
                        element.classList.add("dragging");
                        logMessage(`Iniciando arrastre para: ${element.id}`);
                        DotNet.invokeMethodAsync('RMSuit_v2', 'SetDraggingState', true)
                            .catch(error => logMessage(`Error al actualizar estado de arrastre: ${error}`));
                    },
                    onEnd: (evt) => {
                        const element = evt.item;
                        element.classList.remove("dragging");
                        const elementId = evt.item.id.replace('dibujo-', '');

                        const rect = element.getBoundingClientRect();

                        const container = document.querySelector('.map-container');
                        const containerRect = container.getBoundingClientRect();

                        const newX = Math.round(rect.left - containerRect.left);
                        const newY = Math.round(rect.top - containerRect.top);

                        logMessage(`Elemento ${elementId} movido a X: ${newX}, Y: ${newY}`);

                        dotNetRef.invokeMethodAsync('UpdateElementPositionAsync', parseInt(elementId), newX, newY)
                            .catch(error => logMessage(`Error al actualizar la posición: ${error}`));

                        DotNet.invokeMethodAsync('RMSuit_v2', 'SetDraggingState', false)
                            .catch(error => logMessage(`Error al actualizar estado de arrastre: ${error}`));
                    },
                    onMove: (evt) => {
                        const element = evt.dragged;
                        const container = document.querySelector('.map-container');
                        const containerRect = container.getBoundingClientRect();

                        // Usamos el evento original del mouse para obtener las coordenadas correctas
                        const mouseEvent = evt.originalEvent;
                        const newX = Math.round(mouseEvent.clientX - containerRect.left - element.offsetWidth / 2);
                        const newY = Math.round(mouseEvent.clientY - containerRect.top - element.offsetHeight / 2);

                        // Actualizar la posición del elemento en tiempo real
                        element.style.left = `${newX}px`;
                        element.style.top = `${newY}px`;

                        logMessage(`Moviendo elemento: ${element.id}, X: ${newX}, Y: ${newY}`);
                    }
                });
            } else {
                logMessage('Sortable: el contenedor no se encontró, reintentando...');
                setTimeout(tryInitialize, 100); // Reintento después de 100ms
            }
        };

        tryInitialize();
    };


    window.updateElementPosition = (elementId, newX, newY) => {

        const element = document.getElementById(elementId);
        if (!element) return;

        const currentX = element.offsetLeft;
        const currentY = element.offsetTop;

        if (currentX !== newX || currentY !== newY) {
            logMessage(`updateElementPosition desde Javascript: ID=${elementId}, newX=${newX}, newY=${newY}`);

            dotNetRef.invokeMethodAsync('UpdateElementPositionAsync', parseInt(elementId.replace('dibujo-', '')), newX, newY)
                .catch(error => logMessage(`Error al actualizar la posición: ${error}`));
        } else {
            logMessage(`Posición ya actualizada, omitiendo la invocación para Elemento ID: ${elementId}`);
        }
    };

    window.addDraggingClass = (elementId) => {

        DotNet.invokeMethodAsync('RMSuit_v2', 'SetDraggingState', true)
            .catch(error => console.error('Error al actualizar estado de arrastre:', error));

        const element = document.getElementById(elementId);
        if (element) {
            logMessage(`Dragging iniciado por el elemento: ${elementId}`);  // Depurar ID del elemento
            element.classList.add("dragging");
        }
    };

    window.saveNewPositions = () => {
        Object.keys(newPositionData).forEach(dibujoId => {
            let position = newPositionData[dibujoId];

            dotNetRef.invokeMethodAsync('UpdateElementPositionAsync', parseInt(dibujoId), position.x, position.y)
                .then(() => {
                    logMessage(`Posición guardada para Dibujo ID: ${dibujoId}, X: ${position.x}, Y: ${position.y}`);
                })
                .catch(error => {
                    logMessage('Error al guardar la posición:', error);
                });
        });
        newPositionData = {};
    };


    window.updateElementPositionWithoutInvocation = (elementId, newX, newY) => {
        const element = document.getElementById(elementId);
        if (!element) return;

        logMessage(`updateElementPositionWithoutInvocation antes de aplicar  y transformación desde Javascript: ID=${elementId}, newX=${newX}, newY=${newY}`);

        // Ajustar para que las posiciones no sean negativas ni fuera del contenedor
        newX = Math.max(0, newX);
        newY = Math.max(0, newY);

        const container = document.querySelector('.map-container');
        const containerWidth = container.clientWidth;
        const containerHeight = container.clientHeight;

        newX = Math.min(newX, containerWidth - element.offsetWidth);
        newY = Math.min(newY, containerHeight - element.offsetHeight);

        const currentLeft = parseInt(element.style.left, 10);
        const currentTop = parseInt(element.style.top, 10);

        if (currentLeft !== newX || currentTop !== newY) {
            logMessage(`updateElementPositionWithoutInvocation desde Javascript: ID=${elementId}, newX=${newX}, newY=${newY}`);


            element.style.left = `${newX}px`;
            element.style.top = `${newY}px`;

            // Forzar redibujo
            element.style.display = 'none';
            requestAnimationFrame(() => {
                element.style.display = '';
            });


        } else {
            logMessage(`Posición ya actualizada, omitiendo la invocación para Elemento ID: ${elementId}`);
        }
    };




</script>
